[{"C:\\Users\\REKHA\\Desktop\\notebook\\src\\index.js":"1","C:\\Users\\REKHA\\Desktop\\notebook\\src\\App.js":"2","C:\\Users\\REKHA\\Desktop\\notebook\\src\\reportWebVitals.js":"3","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\home.js":"4","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\login.js":"5","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\signup.js":"6","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\notebook.js":"7","C:\\Users\\REKHA\\Desktop\\notebook\\src\\aa.js":"8","C:\\Users\\REKHA\\Desktop\\notebook\\src\\abcd.js":"9"},{"size":517,"mtime":1616851130378,"results":"10","hashOfConfig":"11"},{"size":772,"mtime":1615285188119,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":6308,"mtime":1615306420157,"results":"14","hashOfConfig":"11"},{"size":24509,"mtime":1615279517035,"results":"15","hashOfConfig":"11"},{"size":18381,"mtime":1614441131625,"results":"16","hashOfConfig":"11"},{"size":104547,"mtime":1615898888427,"results":"17","hashOfConfig":"11"},{"size":748,"mtime":1615285092032,"results":"18","hashOfConfig":"11"},{"size":501,"mtime":1616851405550,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g4kp1s",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\REKHA\\Desktop\\notebook\\src\\index.js",["42","43"],"C:\\Users\\REKHA\\Desktop\\notebook\\src\\App.js",[],["44","45"],"C:\\Users\\REKHA\\Desktop\\notebook\\src\\reportWebVitals.js",[],"C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\home.js",[],"C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\login.js",["46","47","48","49","50","51","52","53","54"],"import { AppBar, IconButton, Toolbar, Typography, Link, DialogTitle, Grid, Button, Container, Card, CardContent, TextField, Snackbar, Icon, DialogActions, DialogContent, Dialog } from '@material-ui/core';\r\nimport React from 'react';\r\nimport back from '../Images/lg.jpg';\r\nimport google from '../Images/gl.png';\r\nimport ct from '../Images/ct.png';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Notebook from \"./notebook\";\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport {\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            home: \"\",\r\n            showPassword: false,\r\n            signup: \"\",\r\n            loginSuccess: false,\r\n            open: false,\r\n            password_forgot: \"\",\r\n            password_forgot_show: \"\",\r\n            dialogepasswordopen: false,\r\n            forgot_email: \"\",\r\n            dialogepassword: false,\r\n            dialogepasswordopen: false,\r\n            dialogepassworderror: false,\r\n            about_open: false,\r\n\r\n\r\n\r\n        }\r\n    }\r\n    handleLogin = () => {\r\n        fetch(\"http://localhost:5000/login_user\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.email,\r\n                \"password\": this.state.password\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                console.log(\"login\");\r\n                if (resJson.status === true) {\r\n                    localStorage.setItem(\"user-token\", JSON.stringify(resJson.token));\r\n                    this.setState({\r\n                        message: resJson.message,\r\n                        loginSuccess: true,\r\n                        email: resJson.result\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        message: resJson.message,\r\n                        loginSuccess: false,\r\n                        open: true\r\n                    })\r\n                }\r\n                console.log(this.state.email);\r\n            })\r\n    }\r\n    //FOR LOGIN\r\n    handleClickShowPassword = () => {\r\n        this.setState({\r\n            showPassword: !this.state.showPassword\r\n        })\r\n    }\r\n\r\n    handleMouseDownPassword = (e) => {\r\n        e.preventDefault();\r\n    }\r\n    //FOR FORGOT PASSWORD\r\n    handleShowPassword = () => {\r\n        this.setState({\r\n            password_forgot_show: !this.state.password_forgot_show\r\n        })\r\n    }\r\n\r\n    handleMousePassword = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    //FUNCTION CALL TO CHANGE PASSWORD\r\n    handleChangePassword = () => {\r\n        fetch(\"http://localhost:5000/forgot_password\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.forgot_email,\r\n                \"password\": this.state.password_forgot\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialogepassword: true,\r\n                        message: resJson.message,\r\n                        dialogepasswordopen: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialogepassworderror: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.home === \"home\") {\r\n            return (\r\n                <Redirect to=\"home\" />\r\n            )\r\n        }\r\n        if (this.state.signup === \"signup\") {\r\n            return (\r\n                <Redirect to=\"signup\" />\r\n            )\r\n        }\r\n        if (this.state.loginSuccess === true) {\r\n            return (\r\n                <div>\r\n                    {/* <Notebook ver_email={this.state.email} /> */}\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/notebook\",\r\n                            state: { ver_email: this.state.email }\r\n                        }} />\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div style={{ background: \"url(\" + back + \")\", backgroundSize: \"cover\", height: \"100vh\", width: \"100vw\" }} grid={{ xs: 12 }}>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <Link style={{ textDecoration: \"none\", fontFamily: \"serif\", marginLeft: 20, color: \"black\", marginTop: 20, cursor: \"pointer\" }} variant=\"h6\" size=\"large\" onClick={() => { this.setState({ home: \"home\" }) }}><i>Home</i></Link>\r\n                        <Link style={{ textDecoration: \"none\", fontFamily: \"serif\", marginTop: 20, color: \"black\", cursor: \"pointer\", marginLeft: 20 }} variant=\"h6\" size=\"large\" onClick={() => { this.setState({ signup: \"signup\" }) }}><i>Signup</i></Link>\r\n                        <Link style={{ textDecoration: \"none\", fontFamily: \"serif\", marginTop: 20, color: \"black\", cursor: \"pointer\", marginLeft: 20 }} variant=\"h6\" size=\"large\" onClick={() => { this.setState({ about_open: true }) }}><i>About</i></Link>\r\n                        <Container style={{ paddingTop: 90 }}>\r\n                            <Card style={{ height: 600, width: 600, background: \"lightgrey\" }}>\r\n                                <CardContent style={{ marginLeft: 50, width: 470 }}>\r\n                                    <Typography variant=\"h3\" style={{ textAlign: \"center\", fontFamily: \"serif\", marginTop: 20 }}><i><b>Welcome To Notebook!</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><i>Sign In your account</i></Typography><br />\r\n                                    <Typography variant=\"h6\" style={{ fontFamily: \"serif\", marginTop: 30 }}><i><b>Email Id</b></i></Typography>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        label=\"Enter Your Email Id\"\r\n                                        required={true}\r\n                                        margin=\"dense\"\r\n                                        value={this.state.email}\r\n                                        onChange={(e) => { this.setState({ email: e.target.value }) }}\r\n                                        fullWidth\r\n                                    /><br />\r\n                                    <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i><b>Password</b></i></Typography>\r\n                                    <FormControl\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        required={true}\r\n                                        fullWidth\r\n                                        color=\"primary\"\r\n                                        margin=\"dense\"\r\n                                    >\r\n                                        <InputLabel htmlFor=\"outlined-adornment-password\" >Enter Your Pasword</InputLabel>\r\n                                        <OutlinedInput\r\n                                            id=\"outlined-adornment-password\"\r\n                                            type={this.state.showPassword ? 'text' : 'password'}\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => { this.setState({ password: e.target.value }) }}\r\n                                            endAdornment={<InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={this.handleClickShowPassword}\r\n                                                    onMouseDown={this.handleMouseDownPassword}\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                            }\r\n                                            labelWidth={150}\r\n                                        />\r\n                                    </FormControl>\r\n                                    <Link style={{ textDecoration: \"none\", cursor: \"pointer\" }} onClick={() => { this.setState({ dialogepasswordopen: true }) }}><Typography variant=\"h6\" style={{ textAlign: \"right\", fontFamily: \"serif\" }}><i>Forgot Password</i></Typography></Link>\r\n                                    <br />\r\n                                    <Button\r\n                                        style={{ width: 300, background: \"teal\", marginLeft: 80, marginTop: 30, fontFamily: \"serif\", borderRadius: 20 }}\r\n                                        margin=\"dense\"\r\n                                        size=\"large\"\r\n                                        onClick={this.handleLogin}\r\n                                        variant=\"contained\"\r\n                                        disabled={(this.state.email === \"\" || this.state.password === \"\") ? true : false}\r\n                                    >\r\n                                        <i><b>Get Started</b></i>\r\n                                    </Button><br /><br />\r\n                                    {/* <Typography variant=\"h6\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><i><b>__________OR__________</b></i></Typography><br />\r\n                            <Typography variant=\"h6\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><b><i>Sign In With</i></b>\r\n                                <IconButton>\r\n                                    <Icon style={{ color: \"blue\" }}>\r\n                                        facebook\r\n                                </Icon>\r\n                                </IconButton>\r\n                                <IconButton>\r\n                                    <Icon style={{ background: \"url(\" + google + \")\", backgroundSize: \"cover\", color: \"grey\" }}></Icon>\r\n                                </IconButton>\r\n                            </Typography> */}\r\n                                    <Typography variant=\"h6\" style={{ textAlign: \"center\", fontFamily: \"serif\", marginTop: 30 }}><i>Don't have an account? <Link onClick={() => { this.setState({ signup: \"signup\" }) }} style={{ textDecoration: \"none\", cursor: \"pointer\" }}>Register here</Link></i></Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Container>\r\n\r\n\r\n                        {/* FORGOT PASSWORD */}\r\n                        <Dialog open={this.state.dialogepasswordopen} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h5\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Forgot Password</b></i>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i><b>Email Id</b></i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            label=\"Enter Your Email Id\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.forgot_email}\r\n                                            onChange={(e) => { this.setState({ forgot_email: e.target.value }) }}\r\n                                            fullWidth\r\n                                        /><br />\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your New Password</i></Typography>\r\n                                        <FormControl\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            fullWidth\r\n                                            color=\"primary\"\r\n                                            margin=\"dense\"\r\n                                        >\r\n                                            <InputLabel htmlFor=\"outlined-adornment-password\" >Enter Your Pasword</InputLabel>\r\n                                            <OutlinedInput\r\n                                                id=\"outlined-adornment-password\"\r\n                                                type={this.state.password_forgot_show ? 'text' : 'password'}\r\n                                                value={this.state.password_forgot}\r\n                                                onChange={(e) => { this.setState({ password_forgot: e.target.value }) }}\r\n                                                endAdornment={<InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={this.handleShowPassword}\r\n                                                        onMouseDown={this.handleMousePassword}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        {this.state.password_forgot_show ? <Visibility /> : <VisibilityOff />}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                                }\r\n                                                labelWidth={150}\r\n                                            />\r\n                                        </FormControl><br />\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={() => { this.setState({ dialogepasswordopen: false }) }}\r\n                                                variant=\"outlined\"\r\n                                            >Cancel</Button>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={this.handleChangePassword}\r\n                                                variant=\"outlined\"\r\n                                            >Update</Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING UPDATE BUTTON OF CHANGE YOUR PASSWORD */}\r\n                        <Dialog open={this.state.dialogepassworderror} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={() => { this.setState({ dialogepassworderror: false }) }} autoFocus variant=\"outlined\" style={{ color: \"black\", background: \"lightgrey\", fontFamily: \"serif\" }}>\r\n                                            OK\r\n                                </Button>\r\n                                    </DialogActions>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialogepassword} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={() => { this.setState({ dialogepassword: false }) }} autoFocus variant=\"outlined\" style={{ color: \"black\", background: \"lightgrey\", fontFamily: \"serif\" }}>\r\n                                            OK\r\n                                </Button>\r\n                                    </DialogActions>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON THE LOGIN BUTTON IF WE GET ANY ERROR THE THIS DIALOG BOX WILL OPEN */}\r\n                        <div style={{ background: \"url(\" + ct + \")\", backgroundSize: \"cover\", height: 320, width: 350, marginTop: -300, marginLeft: 730 }}></div>\r\n                        <Dialog open={this.state.open} fullWidth >\r\n                            <Card style={{ background: \"teal\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={() => { this.setState({ open: false }) }} autoFocus variant=\"outlined\" style={{ color: \"black\", background: \"lightgrey\", fontFamily: \"serif\" }}>\r\n                                            OK\r\n                                </Button>\r\n                                    </DialogActions>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON HELP */}\r\n                        <Dialog open={this.state.about_open} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar style={{ position: 'relative', background: \"black\", color: \"white\" }}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ about_open: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" style={{ fontFamily: \"serif\", position: \"center\", color: \"whitesmoke\", marginLeft: 650 }}>\r\n                                            <i>About</i>\r\n                                        </Typography>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <div>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\", marginTop: 50 }}><i>Be more productive with this beautifully simple note-taking app. </i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>TAKE NOTES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Notebook provides different ways to take notes and capture your thoughts.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Write notes. Start with a text, add images, all in the same text note.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Capture moments using the dedicated photo note.</i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>ORGANIZE NOTES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Keep yourself and your work organized.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Organize various notes into notebooks.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Search within a notebook or across notebooks.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Securely lock your note with passwords of your choice.</i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>SYNCHRONIZE ACROSS DEVICES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Access your work anywhere and everywhere with Notebook's ability to sync your notes to the cloud.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Synchronize all your notes and notebooks across devices and to the cloud.</i></Typography><br />\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.open}\r\n                    autoHideDuration={10000}\r\n                    onClose={this.handleClose}\r\n                    message={this.state.message}\r\n                    action={\r\n                        <IconButton onClick={this.handleClose}>\r\n                            <Icon style={{ color: \"white\" }}>\r\n                                close\r\n                            </Icon>\r\n                        </IconButton>\r\n                    }\r\n                /> */}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\signup.js",["55","56","57","58","59","60"],"import { AppBar, IconButton, Toolbar, DialogActions, DialogContent, Typography, Link, Grid, Button, Container, Card, CardContent, TextField, Snackbar, Icon, Dialog } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport back from '../Images/lg.jpg';\r\nimport google from '../Images/gl.png';\r\nimport ct from '../Images/ct.png';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport {\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nexport default class SignUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            home: \"\",\r\n            name: \"\",\r\n            phone: \"\",\r\n            open: false,\r\n            dialog: false,\r\n            cPassword: \"\",\r\n            showPassword: false,\r\n            showPasswordC: false,\r\n            about_open:false\r\n        }\r\n    }\r\n    handleRegister = () => {\r\n        fetch(\"http://localhost:5000/register_user\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.email,\r\n                \"name\": this.state.name,\r\n                \"phone_number\": this.state.phone,\r\n                \"password\": this.state.password,\r\n                \"confirmPassword\": this.state.cPassword\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                console.log(\"login\");\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialog: true,\r\n                        message: resJson.message\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open: true,\r\n                        message: resJson.message\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState({\r\n            showPassword: !this.state.showPassword\r\n        })\r\n    }\r\n    handleMouseDownPassword = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleClickPassword = () => {\r\n        this.setState({\r\n            showPasswordC: !this.state.showPasswordC\r\n        })\r\n    }\r\n    handleMouseDownPasswordC = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.home === \"home\") {\r\n            return (\r\n                <Redirect to=\"home\" />\r\n            )\r\n        }\r\n        if (this.state.home === \"login\") {\r\n            return (\r\n                <Redirect to=\"login\" />\r\n            )\r\n        }\r\n        return (\r\n            <div style={{ background: \"url(\" + back + \")\", backgroundSize: \"cover\", height: \"100vh\", width: \"100vw\" }} grid={{ xs: 12 }}>\r\n                <Link style={{ textDecoration: \"none\", fontFamily: \"serif\", marginLeft: 20, color: \"black\", marginTop: 20, cursor: \"pointer\" }} variant=\"h6\" size=\"large\" onClick={() => { this.setState({ home: \"home\" }) }}><i>Home</i></Link>\r\n                <Link style={{ textDecoration: \"none\", fontFamily: \"serif\", marginTop: 20, color: \"black\", cursor: \"pointer\", marginLeft: 20 }} variant=\"h6\" size=\"large\" onClick={() => { this.setState({ home: \"login\" }) }}><i>Login</i></Link>\r\n                <Link style={{textDecoration: \"none\", fontFamily: \"serif\",marginTop:20,color:\"black\", cursor:\"pointer\", marginLeft:20  }} variant=\"h6\" size=\"large\" onClick={()=>{this.setState({about_open:true})}}><i>About</i></Link>\r\n                <Container style={{ paddingTop: 90 }}>\r\n                    <Card style={{ height: 600, width: 1100, background: \"whitesmoke\" }}>\r\n                        <CardContent style={{ marginLeft: 50, width: 1000 }}>\r\n                            <Typography variant=\"h4\" style={{ textAlign: \"center\", fontFamily: \"serif\", marginTop: 40 }}><i><b>Create Your Free Account For Access To The Notebook Anytime</b></i></Typography>\r\n                            <Typography variant=\"h5\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><i>Account Information</i></Typography><br />\r\n                            <Grid container item xs={12} spacing={5}>\r\n                                <Grid item lg={6} xs={6}>\r\n                                    <Typography variant=\"h7\" style={{ fontFamily: \"serif\" }}><i><b>Full Name</b></i></Typography>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        label=\"Enter Your Full Name\"\r\n                                        required={true}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        value={this.state.name}\r\n                                        onChange={(e) => { this.setState({ name: e.target.value }) }}\r\n                                    /><br />\r\n                                    <Typography variant=\"h7\" style={{ fontFamily: \"serif\" }}><i><b>Email Id</b></i></Typography>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        label=\"Enter Your Email Id\"\r\n                                        required={true}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        value={this.state.email}\r\n                                        onChange={(e) => { this.setState({ email: e.target.value }) }}\r\n                                    /><br />\r\n                                    <Typography variant=\"h7\" style={{ fontFamily: \"serif\" }}><i><b>Phone Number</b></i></Typography>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        label=\"Enter Your Phone Number\"\r\n                                        required={true}\r\n                                        margin=\"dense\"\r\n                                        value={this.state.phone}\r\n                                        fullWidth\r\n                                        onChange={(e) => { this.setState({ phone: e.target.value }) }}\r\n                                    /><br />\r\n                                </Grid>\r\n                                <Grid item lg={6} xs={6}>\r\n                                    <Typography variant=\"h7\" style={{ fontFamily: \"serif\" }}><i><b>Password</b></i></Typography>\r\n                                    <FormControl\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        required={true}\r\n                                        fullWidth\r\n                                        color=\"primary\"\r\n                                        margin=\"dense\"\r\n                                    >\r\n                                        <InputLabel htmlFor=\"outlined-adornment-password\" >Enter Your Pasword</InputLabel>\r\n                                        <OutlinedInput\r\n                                            id=\"outlined-adornment-password\"\r\n                                            type={this.state.showPassword ? 'text' : 'password'}\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => { this.setState({ password: e.target.value }) }}\r\n                                            endAdornment={<InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={this.handleClickShowPassword}\r\n                                                    onMouseDown={this.handleMouseDownPassword}\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {this.state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                            }\r\n                                            labelWidth={150}\r\n                                        />\r\n                                    </FormControl><br />\r\n                                    <Typography variant=\"h7\" style={{ fontFamily: \"serif\" }}><i><b>Confirm Password</b></i></Typography>\r\n                                    <FormControl\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        required={true}\r\n                                        fullWidth\r\n                                        color=\"primary\"\r\n                                        margin=\"dense\"\r\n                                    >\r\n                                        <InputLabel htmlFor=\"outlined-adornment-password\" >Re-nter Your Pasword</InputLabel>\r\n                                        <OutlinedInput\r\n                                            id=\"outlined-adornment-password\"\r\n                                            type={this.state.showPasswordC ? 'text' : 'password'}\r\n                                            value={this.state.cPassword}\r\n                                            onChange={(e) => { this.setState({ cPassword: e.target.value }) }}\r\n                                            endAdornment={<InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={this.handleClickPassword}\r\n                                                    onMouseDown={this.handleMouseDownPasswordC}\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {this.state.showPasswordC ? <Visibility /> : <VisibilityOff />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                            }\r\n                                            labelWidth={150}\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                                style={{ width: 450, background: \"teal\", marginTop: 40, fontFamily: \"serif\", marginLeft: 250, borderRadius:20 }}\r\n                                margin=\"dense\"\r\n                                size=\"large\"\r\n                                onClick={this.handleRegister}\r\n                                variant=\"contained\"\r\n                                disabled={(this.state.name === \"\" || this.state.email === \"\" || this.state.phone === \"\" || this.state.password === \"\" || this.state.cPassword === \"\") ? true : false}\r\n                            >\r\n                                <i><b>Create Your Account</b></i>\r\n                            </Button><br />\r\n                            <br />\r\n\r\n                            <Typography variant=\"h6\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><i><b>__________OR__________</b></i></Typography><br />\r\n                            <Typography variant=\"h6\" style={{ textAlign: \"center\", fontFamily: \"serif\" }}><i>Already registered <Link onClick={() => { this.setState({ home: \"login\" }) }} style={{ textDecoration: \"none\", cursor: \"pointer\" }}>Login </Link>?</i></Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Container>\r\n                <Dialog open={this.state.open} fullWidth >\r\n                    <Card style={{ background: \"teal\" }}>\r\n                        <CardContent>\r\n                            <DialogContent >\r\n                                <Alert severity=\"info\">{this.state.message}</Alert>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={() => { this.setState({ open: false }) }} autoFocus variant=\"outlined\" style={{ color: \"black\", background: \"lightgrey\", fontFamily: \"serif\" }}>\r\n                                    OK\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                </Dialog>\r\n                <Dialog open={this.state.dialog} fullWidth>\r\n                    <Card style={{ background: \"teal\" }}>\r\n                        <CardContent>\r\n                            <DialogContent>\r\n                                <Alert severity=\"success\">{this.state.message}</Alert>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={() => { this.setState({ dialog: false, home: \"login\" }) }} autoFocus variant=\"outlined\" style={{ color: \"black\", background: \"lightgrey\", fontFamily: \"serif\" }}>\r\n                                    OK\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                </Dialog>\r\n\r\n                  {/* AFTER CLICKING ON HELP */}\r\n                  <Dialog open={this.state.about_open} fullScreen>\r\n                        <DialogContent>\r\n                            <AppBar style={{ position: 'relative', background: \"black\", color: \"white\"}}>\r\n                                <Toolbar>\r\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ about_open: false }) }} aria-label=\"close\">\r\n                                        <CloseIcon />\r\n                                    </IconButton>\r\n                                    <Typography variant=\"h3\" style={{ fontFamily: \"serif\", position: \"center\", color:\"whitesmoke\", marginLeft:650 }}>\r\n                                        <i>About</i>\r\n                                    </Typography>\r\n                                </Toolbar>\r\n                            </AppBar>\r\n                            <div>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\", marginTop:50}}><i>Be more productive with this beautifully simple note-taking app. </i></Typography><br />\r\n                              <Typography variant=\"h4\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i><b>TAKE NOTES</b></i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>Notebook provides different ways to take notes and capture your thoughts.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Write notes. Start with a text, add images, all in the same text note.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Capture moments using the dedicated photo note.</i></Typography><br />\r\n                            <Typography variant=\"h4\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i><b>ORGANIZE NOTES</b></i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>Keep yourself and your work organized.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Organize various notes into notebooks.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Search within a notebook or across notebooks.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Securely lock your note with passwords of your choice.</i></Typography><br />\r\n                            <Typography variant=\"h4\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i><b>SYNCHRONIZE ACROSS DEVICES</b></i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>Access your work anywhere and everywhere with Notebook's ability to sync your notes to the cloud.</i></Typography>\r\n                            <Typography variant=\"h5\" style={{fontFamily:\"serif\", textAlign:\"center\"}}><i>* Synchronize all your notes and notebooks across devices and to the cloud.</i></Typography><br />\r\n\r\n\r\n                              \r\n                            </div>\r\n\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                {/* <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.open}\r\n                    autoHideDuration={10000}\r\n                    onClose={this.handleClose}\r\n                    message={this.state.message}\r\n                    action={\r\n                        <IconButton onClick={this.handleClose}>\r\n                            <Icon style={{ color: \"white\" }}>\r\n                                close\r\n                            </Icon>\r\n                        </IconButton>\r\n                    }\r\n                /> */}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\REKHA\\Desktop\\notebook\\src\\Notebook\\notebook.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { Component } from 'react';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n    Drawer, AppBar, CssBaseline, Toolbar, Tooltip, Checkbox, List, Typography, Grid, TextField, DialogActions, Divider, MenuItem, ListItem, Icon, DialogContent, Dialog, Fab, DialogTitle, Card, CardContent, Button, IconButton, Menu, CardActions, Container\r\n} from \"@material-ui/core\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Redirect } from 'react-router-dom';\r\nimport cover from \"../Images/back.jpg\";\r\nimport prof from \"../Images/prof.webp\";\r\nimport { jsPDF } from \"jspdf\";\r\n// import ReactToPrint, { PrintContextConsumer } from 'react-to-print';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        background: \"black\"\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n        background: \"grey\",\r\n        height: \"100vh\"\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        marginLeft: 230\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        marginLeft: 160,\r\n        marginTop: 680\r\n    },\r\n    appbar: {\r\n        position: 'relative',\r\n        background: \"grey\",\r\n        color: \"white\"\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    textarea: {\r\n        width: 1400,\r\n    },\r\n    speedDial: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n        color: \"white\"\r\n    },\r\n});\r\n// const classes = useStyles();\r\n\r\nclass Notebook extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dialog: false,\r\n            left: \"left\",\r\n            text: \"\",\r\n            title: \"\",\r\n            date: \"\",\r\n            note: [],\r\n            menu: false,\r\n            anchorEl: null,\r\n            dialogBox: false,\r\n            change: false,\r\n            em: this.props.location.state.ver_email,\r\n            name: \"\",\r\n            password: \"\",\r\n            number: \"\",\r\n            dialogname: false,\r\n            dialognameopen: false,\r\n            dialognameerror: false,\r\n            dialogepassword: false,\r\n            dialogepasswordopen: false,\r\n            dialogepassworderror: false,\r\n            dialognumber: false,\r\n            dialognumberopen: false,\r\n            dialognumbererror: false,\r\n            object: localStorage.getItem(\"object\") ? JSON.parse(localStorage.getItem(\"object\")) : [],\r\n            notebook: [],\r\n            subject: \"\",\r\n            dialogpush: false,\r\n            dialogpushopen: false,\r\n            dialogpusherror: false,\r\n            open_delete: false,\r\n            delete_id: \"\",\r\n            open_new: false,\r\n            signup: false,\r\n            signin: false,\r\n            searchData: \"\",\r\n            usertoken: [],\r\n            note_dialog: false,\r\n            note_id: \"\",\r\n            about_open: false,\r\n            sdata: \"\",\r\n            profile: false,\r\n            prof: [],\r\n            profileImage: \"\",\r\n            uploadedFile: null,\r\n            value: \"\",\r\n            indexval: \"\",\r\n            starred: [],\r\n            starred_dialog: false,\r\n            starred_id: \"\",\r\n            starred_para: \"\",\r\n            starred_sub: \"\",\r\n            indexOfNote: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(e) {\r\n        // console.log( this.props.ver_email);\r\n        console.log(this.props.location.state.ver_email);\r\n        if (this.state.searchData === \"\") {\r\n            return;\r\n\r\n        } else {\r\n            this.handleGetData();\r\n            this.handleGetDataStarred();\r\n            // this.updateProfileHandler();\r\n            localStorage.getItem(\"object\") && this.setState({\r\n                object: JSON.parse(localStorage.getItem(\"object\")),\r\n            })\r\n        }\r\n    }\r\n\r\n    userToken = () => {\r\n        localStorage.getItem(\"user-token\") && this.setState({\r\n            usertoken: JSON.parse(localStorage.getItem(\"user-token\")),\r\n        })\r\n    }\r\n\r\n    handleChange = (e, editor) => {\r\n        const data = editor.getData();\r\n        this.setState({\r\n            note: data\r\n        })\r\n    }\r\n    handleUpdate = (e, editor) => {\r\n        const data = editor.getData();\r\n        this.setState({\r\n            note_paragraph: data\r\n        })\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO CHANGE NAME\r\n    handleProfile = () => {\r\n        fetch(\"http://localhost:5000/update_profile\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"name\": this.state.name,\r\n                \"phone_number\": this.state.number\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialogProfile: true,\r\n                        message: resJson.message,\r\n                        edit_profile: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialogProfileError: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO CHANGE NAME\r\n    handleChangeName = () => {\r\n        fetch(\"http://localhost:5000/update_name\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"name\": this.state.name\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialogname: true,\r\n                        message: resJson.message,\r\n                        dialognameopen: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialognameerror: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO CHANGE PASSWORD\r\n    handleChangePassword = () => {\r\n        fetch(\"http://localhost:5000/update_password\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"password\": this.state.password\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialogepassword: true,\r\n                        message: resJson.message,\r\n                        dialogepasswordopen: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialogepassworderror: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO CHANGE NUMBER\r\n    handleChangeNumber = () => {\r\n        fetch(\"http://localhost:5000/update_number\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"phone_number\": this.state.number\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialognumber: true,\r\n                        message: resJson.message,\r\n                        dialognumberopen: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialognumbererror: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n    //ALERT FOR EMPTY NOTE\r\n    alert = () => {\r\n        if (this.state.notebook === []) {\r\n            alert(\"Please Create a Note\");\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //FUNCTION CALL TO GET DATA\r\n    handleGetData = (val) => {\r\n        if (this.state.object !== []) {\r\n            this.setState({\r\n                sdata: \"sdata\",\r\n                value: \"\",\r\n                indexval: \"\"\r\n            })\r\n            fetch(\"http://localhost:5000/get_notes\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    // localStorage.setItem(\"object\",JSON.stringify(this.state.object));\r\n                    this.setState({\r\n                        object: resJson.result,\r\n                        searchData: \"\",\r\n                        val: \"\",\r\n                        sdata: \"sdata\",\r\n                        value: \"\",\r\n                        indexval: \"\"\r\n                    })\r\n                    this.alert();\r\n                    console.log(resJson.result);\r\n                }\r\n                )\r\n\r\n        }\r\n        else {\r\n            alert('Please Create a note');\r\n            return;\r\n        }\r\n        console.log(this.state.object);\r\n\r\n    }\r\n\r\n\r\n\r\n    //FUNCTION CALL TO GET DATA FROM STARRED ARRAY\r\n    handleGetDataStarred = (val) => {\r\n        if (this.state.starred !== []) {\r\n            this.setState({\r\n                sdata: \"starred\"\r\n            })\r\n            fetch(\"http://localhost:5000/get_starred\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    // localStorage.setItem(\"object\",JSON.stringify(this.state.object));\r\n                    this.setState({\r\n                        starred: resJson.result,\r\n                        searchData: \"\",\r\n                        val: \"\",\r\n                        sdata: \"starred\"\r\n\r\n                    })\r\n                    this.alert();\r\n                    console.log(resJson.result);\r\n                }\r\n                )\r\n\r\n        }\r\n        else {\r\n            alert('Please Create a note');\r\n            return;\r\n        }\r\n        console.log(this.state.starred);\r\n\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO GET DATA FROM STARRED ARRAY\r\n    handlePushStarred = (val) => {\r\n        if (this.state.starred !== []) {\r\n            this.setState({\r\n                sdata: \"starred\"\r\n            })\r\n            fetch(\"http://localhost:5000/push_starred\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                    \"subject\": this.state.starred_sub,\r\n                    \"paragraph\": this.state.starred_para\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    console.log(resJson.message)\r\n                    if (resJson.status === true) {\r\n                        this.setState({\r\n                            starred_dialog: false,\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            starred_dialog: true,\r\n\r\n                        })\r\n                    }\r\n                    this.handleGetData();\r\n                }\r\n                )\r\n\r\n        }\r\n        else {\r\n            alert('Please Create a note');\r\n            return;\r\n        }\r\n        console.log(this.state.starred);\r\n\r\n    }\r\n\r\n    //FUNCTION CALL TO GET PROFILE\r\n    handleGet = () => {\r\n        fetch(\"http://localhost:5000/getusers\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                { this.state.profileImage === resJson.result[0].profileImage ? this.setState({ profileImage: resJson.result[0].profileImage }) : this.setState({ profileImage: { prof } }) }\r\n                console.log(resJson);\r\n                this.setState({\r\n                    prof: resJson.result,\r\n                    open: false,\r\n                    profile: true,\r\n                    profileImage: resJson.result[0].profileImage\r\n\r\n                })\r\n                this.updateProfileHandler();\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO PUSH DATA\r\n    handlePush = () => {\r\n        fetch(\"http://localhost:5000/push\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"subject\": this.state.subject,\r\n                \"paragraph\": this.state.note\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialogpushopen: true,\r\n                        dialogpush: false,\r\n                        message: resJson.message,\r\n                        sdata: \"sdata\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialogpusherror: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO PULL DATA\r\n    handleDelete = () => {\r\n        console.log(this.state.delete_id);\r\n        fetch(\"http://localhost:5000/pull\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.delete_id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        open_delete: false,\r\n                        sdata: \"sdata\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO PULL DATA USING CHECK\r\n    handleDeleteCheck = () => {\r\n        if (this.state.indexOfNote === 0) {\r\n            alert(\"Cannot be Placed in first position\")\r\n        } else if (this.state.value === \"\") {\r\n            alert(\"please select one\")\r\n        } else {\r\n            fetch(\"http://localhost:5000/pull\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                    \"id\": this.state.check_id\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    if (resJson.status === true) {\r\n                        this.setState({\r\n                            open_check: true,\r\n                            sdata: \"sdata\",\r\n                            value: false\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            open_delete: true,\r\n                            message: resJson.message\r\n\r\n                        })\r\n                    }\r\n                    this.handleGetData();\r\n                }\r\n                )\r\n        }\r\n    }\r\n\r\n    //FUNCTION CALL TO PULL LAST DATA USING CHECK\r\n    handleDeleteLast = () => {\r\n        if (this.state.indexOfNote === -1) {\r\n            alert(\"Cannot be Placed in Last Position\")\r\n        } else if(this.state.value === \"\"){\r\n            alert(\"please select one\")\r\n        }else{\r\n            fetch(\"http://localhost:5000/pull\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                    \"id\": this.state.check_id\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    if (resJson.status === true) {\r\n                        this.setState({\r\n                            open_last: true,\r\n                            sdata: \"sdata\"\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            open_delete: true,\r\n                            message: resJson.message\r\n\r\n                        })\r\n                    }\r\n                    this.handleGetData();\r\n                }\r\n                )\r\n        }\r\n    }\r\n\r\n    //FUNCTION CALL TO PULL LAST DATA USING CHECK\r\n    handleDeletePrevious = () => {\r\n        if (this.state.indexOfNote === 0) {\r\n            alert(\"Cannot be Placed To Up\")\r\n        } else if(this.state.value === \"\"){\r\n            alert(\"please select one\")\r\n        }else{\r\n            fetch(\"http://localhost:5000/pull\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                    \"id\": this.state.check_id\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    if (resJson.status === true) {\r\n                        this.setState({\r\n                            open_previous: true,\r\n                            sdata: \"sdata\"\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            open_delete: true,\r\n                            message: resJson.message\r\n\r\n                        })\r\n                    }\r\n                    this.handleGetData();\r\n                }\r\n                )\r\n        }\r\n    }\r\n\r\n    //FUNCTION CALL TO PULL LAST DATA USING CHECK\r\n    handleDeleteNext = () => {\r\n        if (this.state.indexOfNote === -1) {\r\n            alert(\"Cannot be Placed To Down\")\r\n        } else if(this.state.value === \"\"){\r\n            alert(\"please select one\")\r\n        }else{\r\n            fetch(\"http://localhost:5000/pull\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'user-token': this.state.usertoken,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"email\": this.state.em,\r\n                    \"id\": this.state.check_id\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then((resJson) => {\r\n                    if (resJson.status === true) {\r\n                        this.setState({\r\n                            open_next: true,\r\n                            sdata: \"sdata\"\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            open_delete: true,\r\n                            message: resJson.message\r\n\r\n                        })\r\n                    }\r\n                    this.handleGetData();\r\n                }\r\n                )\r\n        }\r\n    }\r\n\r\n    //FUNCTION CALL TO PUSH DATA IN THE FIRST POSITION\r\n    handlePushFirst = () => {\r\n        console.log(this.state.indexOfNote)\r\n        fetch(\"http://localhost:5000/push_position\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.check_id,\r\n                \"subject\": this.state.check_sub,\r\n                \"paragraph\": this.state.check_para\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        open_check: false,\r\n                        message: resJson.message\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO PUSH DATA IN THE LAST POSITION\r\n    handlePushLast = () => {\r\n        fetch(\"http://localhost:5000/push_last\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.check_id,\r\n                \"subject\": this.state.check_sub,\r\n                \"paragraph\": this.state.check_para\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        open_last: false,\r\n                        message: resJson.message\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO PUSH DATA IN THE PREVIOUS POSITION\r\n    handlePushPrevious = () => {\r\n        fetch(\"http://localhost:5000/push_previous\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.check_id,\r\n                \"subject\": this.state.check_sub,\r\n                \"paragraph\": this.state.check_para,\r\n                \"position\": this.state.indexOfNote - 1\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        open_previous: false,\r\n                        message: resJson.message\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO PUSH DATA IN THE NEXT POSITION\r\n    handlePushNext = () => {\r\n        fetch(\"http://localhost:5000/push_next\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.check_id,\r\n                \"subject\": this.state.check_sub,\r\n                \"paragraph\": this.state.check_para,\r\n                \"position\": this.state.indexOfNote + 1\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        open_next: false,\r\n                        message: resJson.message\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        open_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n    //FUNCTION CALL TO PULL DATA FROM STARRED ARRAY\r\n    handleDeleteStarred = () => {\r\n        fetch(\"http://localhost:5000/pull_starred\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.starred_id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        starred_delete: false,\r\n                        sdata: \"starred\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        starred_delete: true,\r\n                        message: resJson.message\r\n\r\n                    })\r\n                }\r\n                this.handleGetDataStarred();\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO DELETE ACCOUNT PERMANENTLY\r\n    handleDeleteAccount = () => {\r\n        fetch(\"http://localhost:5000/delete_user_permanently\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        signup: true\r\n                    })\r\n                }\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    //FUNCTION CALL TO UPDATE NOTES\r\n    handleUpdateNote = (note_id, note_subject, note_paragraph) => {\r\n        fetch(\"http://localhost:5000/update_note\", {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'user-token': this.state.usertoken,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": this.state.em,\r\n                \"id\": this.state.note_id,\r\n                \"subject\": this.state.note_subject,\r\n                \"paragraph\": this.state.note_paragraph\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                if (resJson.status === true) {\r\n                    this.setState({\r\n                        dialog_note_messege: true,\r\n                        message: resJson.message,\r\n                        dialog_save: false,\r\n                        sdata: \"sdata\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        dialog_error_message: true,\r\n                        message: resJson.message,\r\n                        dialog_save: false\r\n                    })\r\n                }\r\n                this.handleGetData();\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n    logout = () => {\r\n        localStorage.clear();\r\n        window.location.href = '/';\r\n    }\r\n    changeProfileImage = (event) => {\r\n        this.setState({\r\n            profileImage: event.target.files[0]\r\n        })\r\n        console.log(event.target.files[0]);\r\n    }\r\n\r\n    updateProfileHandler = () => {\r\n        if (this.state.profileImage === \"\") {\r\n            alert(\"Please Choose a file\");\r\n            return;\r\n        }\r\n        // e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append(\"email\", this.state.em);\r\n        formData.append(\"profileImage\", this.state.profileImage);\r\n        fetch(\"http://localhost:5000/profile\", {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n            .then(res => res.json())\r\n            .then((resJson) => {\r\n                console.log(resJson);\r\n                this.setState({\r\n                    profileImage: resJson.result.name,\r\n                    profile: false\r\n                })\r\n                console.log(this.state.profileImage)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // jsPDFGenerator=()=>{\r\n    //     const doc = new jsPDF();\r\n    //     doc.setFontSize(22);\r\n    //     doc.text( 10, 10,this.state.text);\r\n    //     doc.setFontSize(16);\r\n    //     doc.text( 10, 10,this.state.textPara,{width:600,marginLeft:10,marginTop:10});\r\n    //     doc.save(\"myFile.pdf\");\r\n    //     this.setState({jspdf:false})\r\n    // }\r\n\r\n    render() {\r\n        if (this.state.signup === true) {\r\n            return (\r\n                <div>\r\n                    <Redirect to=\"signup\" />\r\n                </div>\r\n            )\r\n        }\r\n        if (this.state.signin === true) {\r\n            return (\r\n                <div>\r\n                    <Redirect to=\"/\" />\r\n                </div>\r\n            )\r\n        }\r\n        const { classes } = this.props;\r\n\r\n        // var pp = this.state.profileImage;\r\n        // if (this.state.profileImage) {\r\n        //     var pp = this.state.profileImage;\r\n        // } else {\r\n        //     pp = prof;\r\n        // }\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <CssBaseline />\r\n                        {/* APP BAR */}\r\n                        <AppBar position=\"fixed\" className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h3\" noWrap style={{ fontFamily: \"serif\" }}>\r\n                                    <i>Notebook</i>\r\n                                </Typography>\r\n                                <Tooltip title=\"Go to First position\" >\r\n                                    <IconButton style={{ marginLeft: 730, color: \"white\" }} onClick={this.handleDeleteCheck}>\r\n                                        <Icon>\r\n                                            first_page\r\n                                    </Icon>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Go to Previous position\">\r\n                                    <IconButton style={{ color: \"white\" }} onClick={this.handleDeletePrevious}>\r\n                                        <Icon>\r\n                                            arrow_upward\r\n                                    </Icon>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Go to Next poition\">\r\n                                    <IconButton style={{ color: \"white\" }} onClick={this.handleDeleteNext}>\r\n                                        <Icon>\r\n                                            arrow_downward\r\n                                    </Icon>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Go to Last position\">\r\n                                    <IconButton style={{ color: \"white\" }} onClick={this.handleDeleteLast}>\r\n                                        <Icon>\r\n                                            last_page\r\n                                    </Icon>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Search the Subject\">\r\n                                    <input type=\"text\" onChange={(e) => this.setState({ searchData: e.target.value })} style={{ height: 30, width: 300, borderRadius: 10 }} placeholder=\"Search the subject\" />\r\n                                </Tooltip>\r\n                                <MenuIcon fontSize=\"large\" style={{ marginLeft: 30 }} onClick={(e) => { this.setState({ open: true, anchorEl: e.currentTarget }) }} />\r\n                                <Menu\r\n                                    id=\"lock-menu\"\r\n                                    anchorEl={this.state.anchorEl}\r\n                                    keepMounted\r\n                                    open={this.state.open}\r\n                                    onClose={() => { this.setState({ open: false }) }}>\r\n                                    <MenuItem onClick={this.handleGet}><Typography style={{ fontFamily: \"serif\" }}>My Profile</Typography></MenuItem>\r\n                                    <MenuItem onClick={() => { this.setState({ open: false, change: true }) }}><Typography style={{ fontFamily: \"serif\" }}>Manage Account</Typography></MenuItem>\r\n                                    <MenuItem onClick={this, this.logout}><Typography style={{ fontFamily: \"serif\" }}>Log Out</Typography></MenuItem>\r\n                                    <MenuItem onClick={() => { this.setState({ account_open: true, open: false }) }}><Typography style={{ fontFamily: \"serif\" }}>Delete Account</Typography></MenuItem>\r\n                                    <MenuItem onClick={() => { this.setState({ about_open: true, open: false }) }}><Typography style={{ fontFamily: \"serif\" }}>About</Typography></MenuItem>\r\n                                </Menu>\r\n                                {/* () => { this.setState({ open: false, signin:true }) } */}\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"permanent\"\r\n                            classes={{\r\n                                paper: classes.drawerPaper,\r\n                            }}\r\n                        >\r\n                            <Toolbar />\r\n                            <div className={classes.drawerContainer}>\r\n                                <List >\r\n                                    <Tooltip title=\"See all Notes\">\r\n                                        <ListItem style={{ fontFamily: \"serif\", cursor: \"pointer\", color: \"white\" }} onClick={(val) => this.handleGetData(val)}>\r\n                                            <Icon>description</Icon>\r\n                                            <Typography style={{ fontFamily: \"serif\", marginLeft: 15 }}>All Notes</Typography></ListItem>\r\n                                    </Tooltip>\r\n                                    <Divider />\r\n                                    <Tooltip title=\"Starred\">\r\n                                        <ListItem style={{ fontFamily: \"serif\", cursor: \"pointer\", color: \"white\" }} onClick={(val) => this.handleGetDataStarred(val)}>\r\n                                            <Icon>grade</Icon>\r\n                                            <Typography style={{ fontFamily: \"serif\", marginLeft: 15 }}>Starred</Typography></ListItem>\r\n                                    </Tooltip>\r\n                                    <Divider />\r\n                                </List>\r\n                            </div>\r\n                            <Fab className={classes.fab} style={{ background: \"black\", color: \"white\" }} aria-label=\"add\" onClick={() => { this.setState({ dialog: true }) }}>\r\n                                <Tooltip title=\"Create a Note\">\r\n                                    <AddIcon />\r\n                                </Tooltip>\r\n                            </Fab>\r\n                        </Drawer>\r\n\r\n                        {/* MAIN PART */}\r\n                        <main className={classes.content}>\r\n                            <Toolbar />\r\n                            <div>\r\n                                {this.state.sdata === \"sdata\" ?\r\n                                    <ol>{\r\n                                        this.state.object.filter((val) => {\r\n                                            if (this.state.searchData === \"\") {\r\n                                                return \"No result found\"\r\n                                            } else if (val.subject.toLowerCase().includes(this.state.searchData.toLowerCase())) {\r\n                                                return val\r\n                                            }\r\n                                        }).map((s, index) => {\r\n                                            return (\r\n                                                <div>\r\n                                                    <Card key={s.id} style={{ width: 1200, backgroundColor: \"#0f1924\" }}>\r\n                                                        <CardContent>\r\n                                                            <Typography variant=\"h6\" style={{ fontFamily: \"serif\", color: \"white\" }}><i><b>{s.subject}</b></i></Typography>\r\n                                                            <CardActions>\r\n                                                                <Tooltip title=\"Open Note\">\r\n                                                                    <IconButton onClick={() => { this.setState({ sub: s.subject, para: s.paragraph, open_new: true }) }} style={{ marginLeft: 900, color: \"white\" }}><Icon>open_in_new</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip title=\"Edit Note\">\r\n                                                                    <IconButton onClick={() => { this.setState({ note_id: s.unique_id, note_paragraph: s.paragraph, note_subject: s.subject, note_dialog: true }) }} style={{ color: \"white\" }}><Icon>edit</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip title=\"Delete Note\">\r\n                                                                    <IconButton onClick={() => { this.setState({ delete_id: s.unique_id, open_delete: true }) }} style={{ color: \"white\" }}><Icon>delete</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip title=\"Starred\">\r\n                                                                    <IconButton onClick={() => { this.setState({ starred_id: s.unique_id, starred_para: s.paragraph, starred_sub: s.subject, starred_dialog: true }) }} style={{ color: \"white\" }}><Icon>star_rate</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip title=\"Click to Change the position\">\r\n                                                                    <Checkbox value={this.state.value}\r\n                                                                        style={{ color: \"white\" }}\r\n                                                                        checked={this.state.indexval === s.unique_id}\r\n                                                                        onClick={(e) => { if (e.target.checked === true) { this.setState({ check_sub: s.subject, check_id: s.unique_id, check_para: s.paragraph, value: false, value: s.unique_id, indexval: s.unique_id, indexOfNote: index }) } }}\r\n                                                                    />\r\n                                                                </Tooltip>\r\n                                                                {/* <Tooltip title=\"Download\">\r\n                                                                    <Button onClick={()=>{this.setState({jspdf:true, text:s.subject, textPara:s.paragraph })}}>Downlad</Button>\r\n                                                                </Tooltip> */}\r\n                                                            </CardActions>\r\n                                                        </CardContent>\r\n                                                    </Card><br />\r\n                                                </div>\r\n                                            )\r\n                                        })}</ol> :\r\n                                    <ol>{\r\n                                        this.state.starred.filter((val) => {\r\n                                            if (this.state.searchData === \"\") {\r\n                                                return \"No result found\"\r\n                                            } else if (val.subject.toLowerCase().includes(this.state.searchData.toLowerCase())) {\r\n                                                return val\r\n                                            }\r\n                                        }).map((s, index) => {\r\n                                            return (\r\n                                                <div>\r\n                                                    <Card key={s.id} style={{ width: 1200, backgroundColor: \"#0f1924\" }}>\r\n                                                        <CardContent>\r\n                                                            <Typography variant=\"h6\" style={{ fontFamily: \"serif\", color: \"white\" }}><i><b>{s.subject}</b></i></Typography>\r\n                                                            <CardActions>\r\n                                                                <Tooltip title=\"Open Note\">\r\n                                                                    <IconButton onClick={() => { this.setState({ starred_sub: s.subject, starred_para: s.paragraph, starred_open: true }) }} style={{ marginLeft: 1050, color: \"white\" }}><Icon>open_in_new</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip title=\"Delete Note\">\r\n                                                                    <IconButton onClick={() => { this.setState({ starred_id: s.unique_id, starred_delete: true }) }} style={{ color: \"white\" }}><Icon>delete</Icon></IconButton>\r\n                                                                </Tooltip>\r\n                                                            </CardActions>\r\n                                                        </CardContent>\r\n                                                    </Card><br />\r\n                                                </div>\r\n                                            )\r\n                                        })}</ol>\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                {this.state.sdata === \"\" ? <Typography variant=\"h2\" style={{ fontFamily: \"serif\", textAlign: \"center\", marginTop: 150, marginleft: 50 }}><b><i>If you have visited for the first time then click on the Plus button and create your first note\r\n                            otherwise click on All Notes to see your all Notes</i></b></Typography> : <></>}\r\n                            </div>\r\n                        </main>\r\n\r\n\r\n                        {/* AFTER CLICKING ON DOWNLOAD BUTTON */}\r\n                        <Dialog open={this.state.jspdf} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>Download ONE OBJECT</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Are you sure you want to download this?</Typography>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => { this.setState({ jspdf: false }) }} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }} size=\"large\">\r\n                                        CANCEL\r\n                            </Button>\r\n                                    <Button onClick={this.jsPDFGenerator} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }} size=\"large\">\r\n                                        YES\r\n                            </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n\r\n                        {/* AFTER CLICKING ON STARRED BUTTON */}\r\n                        <Dialog open={this.state.starred_dialog} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>STARRED ONE OBJECT</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Are you sure you want to add this on starred folder?</Typography>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => { this.setState({ starred_dialog: false }) }} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }} size=\"large\">\r\n                                        CANCEL\r\n                            </Button>\r\n                                    <Button onClick={this.handlePushStarred} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }} size=\"large\">\r\n                                        YES\r\n                            </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON MY PROFILE BUTTON */}\r\n                        <Dialog open={this.state.profile} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar className={classes.appbar}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ profile: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" className={classes.title} style={{ fontFamily: \"serif\", textAlign: \"center\" }}>\r\n                                            <i>My Profile</i>\r\n                                        </Typography>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <div style={{ background: \"url(\" + cover + \")\", backgroundSize: \"cover\", height: \"70vh\", width: \"97vw\" }}>\r\n                                    {this.state.prof.map((s) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Container style={{ paddingTop: 70, height: 300, width: 1000 }}>\r\n                                                    <Card style={{ height: 550, width: 1000, background: \"lightgrey\" }}>\r\n                                                        <CardContent>\r\n                                                            <Grid container>\r\n                                                                <Grid item lg={6} xs={6} style={{ marginLeft: 30, marginTop: 30 }}>\r\n                                                                    {this.state.profileImage ? <img src={\"http://localhost:5000/\" + this.state.profileImage.name} alt=\"profileImage\" width=\"350\" style={{ borderRadius: 20, height: 350, width: 350 }} /> :\r\n                                                                        <img src={prof} width=\"350\" style={{ borderRadius: 20 }} />\r\n\r\n                                                                    }\r\n                                                                    {/* <Card style={{ background: \"url(\" + prof + \")\", backgroundSize: \"cover\", height: 350, width: 350, borderRadius: 20, backgroundColor: \"black\" }}></Card> */}\r\n                                                                </Grid><br />\r\n                                                                <Grid item lg={6} xs={6} style={{ marginLeft: -50, marginTop: 30 }}>\r\n                                                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i><b>Full Name</b></i></Typography>\r\n                                                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\" }}><i>{s.name}</i></Typography><br />\r\n                                                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i><b>Email Id</b></i></Typography>\r\n                                                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\" }}><i>{s.email}</i></Typography><br />\r\n                                                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i><b>Phone number</b></i></Typography>\r\n                                                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\" }}><i>{s.phone_number}</i></Typography><br />\r\n                                                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i><b>Id</b></i></Typography>\r\n                                                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\" }}><i>{s._id}</i></Typography>\r\n\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                            <form\r\n                                                            // action=\"/profile\" method=\"post\" enctype=\"multipart/form-data\"\r\n                                                            >\r\n                                                                {/* <input type=\"file\" name=\"profileImage\" style={{ width: 300, marginLeft: 100, marginTop: 20 }} /> */}\r\n                                                                <Typography variant=\"h6\" style={{ marginTop: 20, fontFamily: \"serif\", marginLeft: 50 }}><i><b>Update Profile:</b></i>\r\n                                                                    <input type=\"file\" style={{ width: 300, marginTop: 20, marginLeft: 10 }} onChange={this.changeProfileImage.bind(this)} />\r\n                                                                </Typography>\r\n                                                            </form>\r\n                                                            {/* <input type=\"file\" name=\"profileImage\" style={{ width: 300, marginLeft: 100, marginTop: 20 }}/><br /> */}\r\n                                                            <Button variant=\"contained\" size=\"large\" style={{ width: 300, marginLeft: 150, marginTop: 20, borderRadius: 20 }} onClick={this.updateProfileHandler.bind(this)} ><Typography style={{ fontFamily: \"serif\" }}><i>Upload Profile</i></Typography></Button>\r\n                                                            <Button variant=\"contained\" size=\"large\" style={{ width: 300, marginLeft: 50, marginTop: 20, borderRadius: 20 }} onClick={() => { this.setState({ edit_profile: true, name: s.name, number: s.phone_number }) }}><Typography style={{ fontFamily: \"serif\" }}><i>Edit Profile</i></Typography></Button>\r\n                                                        </CardContent>\r\n                                                    </Card>\r\n\r\n                                                </Container>\r\n                                            </div>\r\n                                        )\r\n\r\n                                    })}\r\n                                </div>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON OPEN ICON BUTTON OF ALL NOTES ARRAY*/}\r\n                        <Dialog open={this.state.open_new} onClose={() => { this.setState({ dialog: false }) }} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar className={classes.appbar}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ open_new: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" className={classes.title} style={{ fontFamily: \"serif\", textAlign: \"center\" }}>\r\n                                            <i>{this.state.sub}</i>\r\n                                        </Typography>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <div>\r\n                                    <Typography variant=\"h6\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>{ReactHtmlParser(this.state.para)}</i></Typography>\r\n                                </div>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON DELETE ICON BUTTON OF ALL NOTES ARRAY*/}\r\n                        <Dialog open={this.state.open_delete} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>DELETE ONE OBJECT</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Are you sure you want to delete this?</Typography>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => { this.setState({ open_delete: false }) }} size=\"large\" variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        CANCEL\r\n                            </Button>\r\n                                    <Button onClick={this.handleDelete} variant=\"contained\" size=\"large\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        DELETE\r\n                            </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON OPEN ICON BUTTON OF STARRED ARRAY*/}\r\n                        <Dialog open={this.state.starred_open} onClose={() => { this.setState({ dialog: false }) }} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar className={classes.appbar}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" size=\"large\" onClick={() => { this.setState({ starred_open: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" className={classes.title} style={{ fontFamily: \"serif\", textAlign: \"center\" }}>\r\n                                            <i>{this.state.starred_sub}</i>\r\n                                        </Typography>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <div>\r\n                                    <Typography variant=\"h6\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>{ReactHtmlParser(this.state.starred_para)}</i></Typography>\r\n                                </div>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON DELETE ICON BUTTON OF STARRED ARRAY*/}\r\n                        <Dialog open={this.state.starred_delete} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>DELETE ONE OBJECT</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Are you sure you want to delete this?</Typography>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => { this.setState({ starred_delete: false }) }} size=\"large\" variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        CANCEL\r\n                            </Button>\r\n                                    <Button onClick={this.handleDeleteStarred} variant=\"contained\" size=\"large\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        DELETE\r\n                            </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* <SpeedDial\r\n                        ariaLabel=\"SpeedDial openIcon example\"\r\n                        className={classes.speedDial}\r\n                        onClick={() => { this.setState({ dialog: true }) }}\r\n                        // hidden={hidden}\r\n                        icon={<SpeedDialIcon openIcon={<EditIcon />} />}\r\n                        // onClose={handleClose}\r\n                        // onOpen={handleOpen}\r\n                        // open={open}\r\n                    ></SpeedDial> */}\r\n\r\n                        {/* </main> */}\r\n\r\n\r\n                        {/* DIALOG BOX TO WRITE A NOTE*/}\r\n                        <Dialog open={this.state.dialog} onClose={() => { this.setState({ dialog: false }) }} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar className={classes.appbar}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ dialog: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" className={classes.title} style={{ fontFamily: \"serif\" }}>\r\n                                            <i>Create Your Note</i>\r\n                                        </Typography>\r\n                                        <Button autoFocus color=\"inherit\" size=\"large\" onClick={() => { this.setState({ dialogpush: true }) }} >\r\n                                            save\r\n                                        </Button>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i>Subject</i></Typography>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    color=\"primary\"\r\n                                    label=\"Enter Your Subject Name\"\r\n                                    required={true}\r\n                                    margin=\"dense\"\r\n                                    value={this.state.subject}\r\n                                    onChange={(e) => { this.setState({ subject: e.target.value }) }}\r\n                                    fullWidth\r\n                                />\r\n                                <CKEditor\r\n                                    editor={ClassicEditor}\r\n                                    data={this.state.addData}\r\n                                    onChange={this.handleChange}\r\n\r\n                                />\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON SAVE BUTTON */}\r\n                        <Dialog open={this.state.dialogpush} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle>\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i>Notebook</i></Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography style={{ fontFamily: \"serif\" }}>Do you want to save it?</Typography>\r\n                                        <DialogActions>\r\n                                            <Button onClick={() => { this.setState({ dialogpush: false }) }} size=\"large\" autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                Cancel\r\n                                        </Button>\r\n                                            <Button onClick={this.handlePush} size=\"large\" autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                Save\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON OK BUTTON TO SAVE */}\r\n                        <Dialog open={this.state.dialogpusherror} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button onClick={() => { this.setState({ dialogpusherror: false }) }} size=\"large\" autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialogpushopen} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogpushopen: false, dialog: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n\r\n                        {/* DIALOG BOX TO UPDATE A NOTE*/}\r\n                        <Dialog open={this.state.note_dialog} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar className={classes.appbar}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ note_dialog: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" className={classes.title} style={{ fontFamily: \"serif\" }}>\r\n                                            <i>Edit Your Note</i>\r\n                                        </Typography>\r\n                                        <Button autoFocus size=\"large\" color=\"inherit\" onClick={() => { this.setState({ dialog_save: true }) }} >\r\n                                            save\r\n                                        </Button>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i>Subject</i></Typography>\r\n                                <TextField\r\n                                    variant=\"filled\"\r\n                                    color=\"primary\"\r\n                                    label=\"Enter Your Subject Name\"\r\n                                    required={true}\r\n                                    margin=\"dense\"\r\n                                    value={this.state.note_subject}\r\n                                    onChange={(e) => { this.setState({ note_subject: e.target.value }) }}\r\n                                    fullWidth\r\n                                />\r\n                                <CKEditor\r\n                                    editor={ClassicEditor}\r\n                                    data={this.state.addData}\r\n                                    data={this.state.note_paragraph}\r\n                                    onChange={this.handleUpdate}\r\n\r\n                                />\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n\r\n\r\n                        {/* AFTER CLICKING ON SAVE BUTTON OF UPDATE NOTES*/}\r\n                        <Dialog open={this.state.dialog_save} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle>\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i>Notebook</i></Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography style={{ fontFamily: \"serif\" }}>Do you want to save the updated note?</Typography>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialog_save: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                Cancel\r\n                                        </Button>\r\n                                            <Button size=\"large\" onClick={this.handleUpdateNote} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                Save\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON OK BUTTON TO UPDATE */}\r\n                        <Dialog open={this.state.dialog_error_message} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialog_error_message: false, dialog_save: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialog_note_messege} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialog_note_messege: false, dialog_save: false, note_dialog: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING ON MANAGE ACCOUNT */}\r\n                        <Dialog open={this.state.change} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Manage Your Account</b></i>\r\n                                            <IconButton edge=\"end\" color=\"inherit\" onClick={() => { this.setState({ change: false }) }} aria-label=\"close\" style={{ marginLeft: 160 }}>\r\n                                                <CloseIcon />\r\n                                            </IconButton>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <MenuItem onClick={() => { this.setState({ dialognameopen: true, change: false }) }}><Typography style={{ fontFamily: \"serif\", fontSize: \"18px\" }}>Update Your Name</Typography></MenuItem>\r\n                                        <MenuItem onClick={() => { this.setState({ dialogepasswordopen: true, change: false }) }}><Typography style={{ fontFamily: \"serif\", fontSize: \"18px\" }}>Update Your Password</Typography></MenuItem>\r\n                                        <MenuItem onClick={() => { this.setState({ dialognumberopen: true, change: false }) }}><Typography style={{ fontFamily: \"serif\", fontSize: \"18px\" }}>Update Your Phone Number</Typography></MenuItem>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING ON UPDATE PROFILE */}\r\n                        <Dialog open={this.state.edit_profile} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Update Your Profile</b></i>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your new name</i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            // color=\"primary\"\r\n                                            label=\"Enter Your Name\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.name}\r\n                                            onChange={(e) => { this.setState({ name: e.target.value }) }}\r\n                                            fullWidth\r\n                                        />\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your new phone number</i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            // color=\"primary\"\r\n                                            label=\"Enter Your Phone number\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.number}\r\n                                            onChange={(e) => { this.setState({ number: e.target.value }) }}\r\n                                            fullWidth\r\n                                        />\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={() => { this.setState({ edit_profile: false }) }}\r\n                                                variant=\"contained\"\r\n                                            >Cancel</Button>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={this.handleProfile}\r\n                                                variant=\"contained\"\r\n                                            >Update</Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING UPDATE BUTTON OF UPDATE PROFILE */}\r\n                        <Dialog open={this.state.dialogProfileError} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogProfileError: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialogProfile} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogProfile: false, profile: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING ON CHANGE YOUR NAME */}\r\n                        <Dialog open={this.state.dialognameopen} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Update Your Name</b></i>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your name</i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            // color=\"primary\"\r\n                                            label=\"Enter Your Name\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.name}\r\n                                            onChange={(e) => { this.setState({ name: e.target.value }) }}\r\n                                            fullWidth\r\n                                        />\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={() => { this.setState({ dialognameopen: false }) }}\r\n                                            >Cancel</Button>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={this.handleChangeName}\r\n                                            >Update</Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING UPDATE BUTTON OF CHANGE YOUR NAME */}\r\n                        <Dialog open={this.state.dialognameerror} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialognameerror: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialogname} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogname: false, profile: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING ON CHANGE PASSWORD */}\r\n                        <Dialog open={this.state.dialogepasswordopen} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Update Your Email Id</b></i>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your Password</i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            // color=\"primary\"\r\n                                            label=\"Enter Your Name\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => { this.setState({ password: e.target.value }) }}\r\n                                            fullWidth\r\n                                        />\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={() => { this.setState({ dialogepasswordopen: false }) }}\r\n                                            >Cancel</Button>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={this.handleChangePassword}\r\n                                            >Update</Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING UPDATE BUTTON OF CHANGE YOUR PASSWORD */}\r\n                        <Dialog open={this.state.dialogepassworderror} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogepassworderror: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialogepassword} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialogepassword: false, profile: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING ON CHANGE PHONE NUMBER */}\r\n                        <Dialog open={this.state.dialognumberopen} fullWidth>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogTitle >\r\n                                        <Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}>\r\n                                            <i><b>Update Your Email Id</b></i>\r\n                                        </Typography>\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <Typography variant=\"h6\" style={{ fontFamily: \"serif\" }}><i>Enter your Password</i></Typography>\r\n                                        <TextField\r\n                                            variant=\"outlined\"\r\n                                            // color=\"primary\"\r\n                                            label=\"Enter Your Name\"\r\n                                            required={true}\r\n                                            margin=\"dense\"\r\n                                            value={this.state.number}\r\n                                            onChange={(e) => { this.setState({ number: e.target.value }) }}\r\n                                            fullWidth\r\n                                        />\r\n                                        <DialogActions>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                variant=\"contained\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={() => { this.setState({ dialognumberopen: false }) }}\r\n                                            >Cancel</Button>\r\n                                            <Button\r\n                                                size=\"large\"\r\n                                                style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}\r\n                                                margin=\"dense\"\r\n                                                size=\"large\"\r\n                                                onClick={this.handleChangeNumber}\r\n                                                variant=\"contained\"\r\n                                            >Update</Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* DIALOG BOX AFTER CLICKING UPDATE BUTTON OF CHANGE YOUR EMAIL ID */}\r\n                        <Dialog open={this.state.dialognumbererror} fullWidth >\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <DialogContent >\r\n                                        <Alert severity=\"info\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialognumbererror: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n                        <Dialog open={this.state.dialognumber} fullWidth>\r\n                            <Card style={{ background: \"darkgrey\" }}>\r\n                                <CardContent>\r\n                                    <DialogContent>\r\n                                        <Alert severity=\"success\">{this.state.message}</Alert>\r\n                                        <DialogActions>\r\n                                            <Button size=\"large\" onClick={() => { this.setState({ dialognumber: false, profile: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                                OK\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </DialogContent>\r\n                                </CardContent>\r\n                            </Card>\r\n\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKIN ON DELETE ACCOUNT */}\r\n                        <Dialog open={this.state.account_open} fullWidth>\r\n                            <DialogTitle><Typography variant=\"h4\" style={{ fontFamily: \"serif\" }}><i>Delete Account Permanently</i></Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography variant=\"h6\" style={{ fontFamily: \"serif\", color: \"grey\" }}><i>Are you sure you want to delete your account permanently?</i></Typography>\r\n                                <DialogActions>\r\n                                    <Button size=\"large\" onClick={() => { this.setState({ account_open: false }) }} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        Cancel\r\n                                </Button>\r\n                                    <Button size=\"large\" onClick={this.handleDeleteAccount} autoFocus variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }} size=\"large\">\r\n                                        Delete Account\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON GO TO FIRST ICON*/}\r\n                        <Dialog open={this.state.open_check} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>POSITION UPDATED OF ALL NOTES</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }} >Positions Changed</Typography>\r\n                                <DialogActions>\r\n                                    <Button size=\"large\" onClick={this.handlePushFirst} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        Ok\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON GO TO LAST ICON*/}\r\n                        <Dialog open={this.state.open_last} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>POSITION UPDATED OF ALL NOTES</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Positions Changed</Typography>\r\n                                <DialogActions>\r\n                                    <Button size=\"large\" onClick={this.handlePushLast} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        Ok\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON GO TO PREVIOUS ICON*/}\r\n                        <Dialog open={this.state.open_previous} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>POSITION UPDATED OF ALL NOTES</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Positions Changed</Typography>\r\n                                <DialogActions>\r\n                                    <Button size=\"large\" onClick={this.handlePushPrevious} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        Ok\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {/* AFTER CLICKING ON GO TO NEXT ICON*/}\r\n                        <Dialog open={this.state.open_next} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                            <DialogTitle id=\"form-dialog-title\"><Typography variant='h5' style={{ fontFamily: \"Serif\" }}>POSITION UPDATED OF ALL NOTES</Typography></DialogTitle>\r\n                            <DialogContent>\r\n                                <Typography style={{ fontFamily: \"Serif\", color: \"grey\" }}>Positions Changed</Typography>\r\n                                <DialogActions>\r\n                                    <Button size=\"large\" onClick={this.handlePushNext} variant=\"contained\" style={{ color: \"black\", background: \"grey\", fontFamily: \"serif\" }}>\r\n                                        Ok\r\n                                </Button>\r\n                                </DialogActions>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n                        {/* AFTER CLICKING ON HELP */}\r\n                        <Dialog open={this.state.about_open} fullScreen>\r\n                            <DialogContent>\r\n                                <AppBar style={{ position: 'relative', background: \"black\", color: \"white\" }}>\r\n                                    <Toolbar>\r\n                                        <IconButton edge=\"start\" color=\"inherit\" onClick={() => { this.setState({ about_open: false }) }} aria-label=\"close\">\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                        <Typography variant=\"h3\" style={{ fontFamily: \"serif\", position: \"center\", color: \"whitesmoke\", marginLeft: 650 }}>\r\n                                            <i>About</i>\r\n                                        </Typography>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                <div>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\", marginTop: 50 }}><i>Be more productive with this beautifully simple note-taking app. </i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>TAKE NOTES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Notebook provides different ways to take notes and capture your thoughts.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Write notes. Start with a text, add images, all in the same text note.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Capture moments using the dedicated photo note.</i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>ORGANIZE NOTES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Keep yourself and your work organized.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Organize various notes into notebooks.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Search within a notebook or across notebooks.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Securely lock your note with passwords of your choice.</i></Typography><br />\r\n                                    <Typography variant=\"h4\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i><b>SYNCHRONIZE ACROSS DEVICES</b></i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>Access your work anywhere and everywhere with Notebook's ability to sync your notes to the cloud.</i></Typography>\r\n                                    <Typography variant=\"h5\" style={{ fontFamily: \"serif\", textAlign: \"center\" }}><i>* Synchronize all your notes and notebooks across devices and to the cloud.</i></Typography><br />\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n\r\n\r\n\r\n                        {/* <Dialog open={this.state.dialogBox} onClose={()=>{this.setState({dialogBox:false})}}>\r\n                    <DialogContent>\r\n                    {ReactHtmlParser(this.state.note)}\r\n                    </DialogContent>\r\n                </Dialog> */}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Notebook);","C:\\Users\\REKHA\\Desktop\\notebook\\src\\aa.js",["83","84"],"C:\\Users\\REKHA\\Desktop\\notebook\\src\\abcd.js",[],{"ruleId":"85","severity":1,"message":"86","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":11},{"ruleId":"85","severity":1,"message":"89","line":6,"column":10,"nodeType":"87","messageId":"88","endLine":6,"endColumn":23},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"85","severity":1,"message":"94","line":1,"column":125,"nodeType":"87","messageId":"88","endLine":1,"endColumn":133},{"ruleId":"85","severity":1,"message":"95","line":1,"column":135,"nodeType":"87","messageId":"88","endLine":1,"endColumn":139},{"ruleId":"85","severity":1,"message":"96","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"97","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":16},{"ruleId":"98","severity":1,"message":"99","line":36,"column":13,"nodeType":"100","messageId":"101","endLine":36,"endColumn":32},{"ruleId":"102","severity":1,"message":"103","line":185,"column":41,"nodeType":"104","endLine":185,"endColumn":50},{"ruleId":"102","severity":1,"message":"103","line":264,"column":45,"nodeType":"104","endLine":264,"endColumn":54},{"ruleId":"102","severity":1,"message":"103","line":295,"column":49,"nodeType":"104","endLine":295,"endColumn":67},{"ruleId":"102","severity":1,"message":"103","line":303,"column":49,"nodeType":"104","endLine":303,"endColumn":67},{"ruleId":"85","severity":1,"message":"94","line":1,"column":142,"nodeType":"87","messageId":"88","endLine":1,"endColumn":150},{"ruleId":"85","severity":1,"message":"95","line":1,"column":152,"nodeType":"87","messageId":"88","endLine":1,"endColumn":156},{"ruleId":"85","severity":1,"message":"96","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":14},{"ruleId":"85","severity":1,"message":"105","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":10},{"ruleId":"102","severity":1,"message":"103","line":150,"column":41,"nodeType":"104","endLine":150,"endColumn":50},{"ruleId":"102","severity":1,"message":"103","line":179,"column":41,"nodeType":"104","endLine":179,"endColumn":50},{"ruleId":"85","severity":1,"message":"106","line":13,"column":8,"nodeType":"87","messageId":"88","endLine":13,"endColumn":17},{"ruleId":"85","severity":1,"message":"107","line":14,"column":8,"nodeType":"87","messageId":"88","endLine":14,"endColumn":21},{"ruleId":"85","severity":1,"message":"108","line":15,"column":8,"nodeType":"87","messageId":"88","endLine":15,"endColumn":16},{"ruleId":"85","severity":1,"message":"109","line":19,"column":10,"nodeType":"87","messageId":"88","endLine":19,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":461,"column":17,"nodeType":"112","messageId":"113","endLine":461,"endColumn":189},{"ruleId":"114","severity":1,"message":"115","line":1074,"column":60,"nodeType":"116","messageId":"117","endLine":1074,"endColumn":61},{"ruleId":"118","severity":1,"message":"119","line":1118,"column":72,"nodeType":"120","messageId":"121","endLine":1118,"endColumn":74},{"ruleId":"98","severity":1,"message":"122","line":1147,"column":224,"nodeType":"100","messageId":"101","endLine":1147,"endColumn":229},{"ruleId":"118","severity":1,"message":"119","line":1160,"column":73,"nodeType":"120","messageId":"121","endLine":1160,"endColumn":75},{"ruleId":"123","severity":1,"message":"124","line":1252,"column":73,"nodeType":"125","endLine":1252,"endColumn":132},{"ruleId":"102","severity":1,"message":"103","line":1503,"column":37,"nodeType":"104","endLine":1503,"endColumn":69},{"ruleId":"102","severity":1,"message":"103","line":1629,"column":49,"nodeType":"104","endLine":1629,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1631,"column":49,"nodeType":"104","endLine":1631,"endColumn":68},{"ruleId":"102","severity":1,"message":"103","line":1638,"column":49,"nodeType":"104","endLine":1638,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1640,"column":49,"nodeType":"104","endLine":1640,"endColumn":68},{"ruleId":"102","severity":1,"message":"103","line":1708,"column":49,"nodeType":"104","endLine":1708,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1716,"column":49,"nodeType":"104","endLine":1716,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1786,"column":49,"nodeType":"104","endLine":1786,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1794,"column":49,"nodeType":"104","endLine":1794,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1864,"column":49,"nodeType":"104","endLine":1864,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1871,"column":49,"nodeType":"104","endLine":1871,"endColumn":61},{"ruleId":"102","severity":1,"message":"103","line":1923,"column":191,"nodeType":"104","endLine":1923,"endColumn":203},{"ruleId":"85","severity":1,"message":"126","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":20},{"ruleId":"85","severity":1,"message":"127","line":29,"column":7,"nodeType":"87","messageId":"88","endLine":29,"endColumn":14},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"'Snackbar' is defined but never used.","'Icon' is defined but never used.","'google' is defined but never used.","'Notebook' is defined but never used.","no-dupe-keys","Duplicate key 'dialogepasswordopen'.","ObjectExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'ct' is defined but never used.","'SpeedDial' is defined but never used.","'SpeedDialIcon' is defined but never used.","'EditIcon' is defined but never used.","'jsPDF' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Duplicate key 'value'.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ReactToPrint' is defined but never used.","'Example' is defined but never used.","no-global-assign","no-unsafe-negation"]